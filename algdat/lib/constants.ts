export const Algorithms = [
    {
        function: "Insertion-Sort(A)",
        dataStructure: "Array",
        returns: "Sorted array A",
        description: "Insertion-Sort is a simple algorithm that sorts an array by iterating through the array and inserting each element into its correct position.",
    },
    {
        function: "Stack-Empty(S)",
        dataStructure: "Stack",
        returns: "True if stack S is empty, false otherwise",
        description: "Stack-Empty is a simple algorithm that checks if the stack is empty or not.",
    },
    {
        function: "Push(S, x)",
        dataStructure: "Stack",
        returns: "Nothing, but adds x at the top of stack S if it is not full",
        description: "Push is a simple algorithm that adds a new element to the stack.",
    },
    {
        function: "Pop(S)",
        dataStructure: "Stack",
        returns: "The top element of stack S, if S is not empty",
        description: "Pop is a simple algorithm that removes the top element from the stack.",
    },
    {
        function: "Enqueue(Q, x)",
        dataStructure: "Queue",
        returns: "Nothing, but adds x at the rear of queue Q",
        description: "Enqueue is a simple algorithm that adds a new element to the queue.",
    },
    {
        function: "Dequeue(Q)",
        dataStructure: "Queue",
        returns: "The front element of queue Q, if Q is not empty",
        description: "Dequeue is a simple algorithm that removes the front element from the queue.",
    },
    {
        function: "List-Search(L, k)",
        dataStructure: "Linked List",
        returns: "A pointer to the first element in L whose key is equal to k",
        description: "List-Search is a simple algorithm that searches for an element in the linked list.",
    },
    {
        function: "List-Prepend(L, x)",
        dataStructure: "Linked List",
        returns: "Nothing, but adds x at the front of list L",
        description: "List-Prepend is a simple algorithm that adds a new element to the front of the linked list.",
    },
    {
        function: "List-Insert(L, x, y)",
        dataStructure: "Linked List",
        returns: "Nothing, but inserts y after x in list L",
        description: "List-Insert is a simple algorithm that inserts an element after another element in the linked list.",
    },
    {
        function: "List-Delete(L, x)",
        dataStructure: "Linked List",
        returns: "Nothing, but removes x from list L",
        description: "List-Delete is a simple algorithm that removes an element from the linked list.",
    },
    {
        function: "Direct-Address-Search(T, k)",
        dataStructure: "Hash Table",
        returns: "The element stored at key k in table T",
        description: "Direct-Address-Search is a simple algorithm that searches for an element in the hash table.",
    },
    {
        function: "Direct-Address-Insert(T, x)",
        dataStructure: "Hash Table",
        returns: "Nothing, but inserts element x into table T",
        description: "Direct-Address-Insert is a simple algorithm that inserts an element into the hash table.",
    },
    {
        function: "Direct-Address-Delete(T, x)",
        dataStructure: "Hash Table",
        returns: "Nothing, but deletes element at key x at table T and sets it to NIL",
        description: "Direct-Address-Delete is a simple algorithm that deletes an element from the hash table.",
    },
    {
        function: "Multiply-And-Shift(k, m)",
        dataStructure: "Hash Table",
        returns: "A hash value for key k",
        description: "MultiplyAndShift is a simple algorithm that generates a hash value for a key.",
    },
    {
        function: "Chained-Hash-Search(T, k)",
        dataStructure: "Hash Table",
        returns: "The element stored at key k in table T",
        description: "Chained-Hash-Search is a simple algorithm that searches for an element in the hash table using chaining.",
    },
    {
        function: "Chained-Hash-Insert(T, x)",
        dataStructure: "Hash Table",
        returns: "Nothing, but inserts element x into table T",
        description: "Chained-Hash-Insert is a simple algorithm that inserts an element into the hash table using chaining.",
    },
    {
        function: "Chained-Hash-Delete(T, x)",
        dataStructure: "Hash Table",
        returns: "Nothing, but deletes element at key x at table T and sets it to NIL",
        description: "Chained-Hash-Delete is a simple algorithm that deletes an element from the hash table using chaining.",
    },    
]